CLEARSCREEN.
SAS off.
RCS off.
print "Initialising".
wait 1.
gear off.

function gravity_calculator {
    declare local GM to ship:body:mu.
    declare local R to (body:radius + ship:altitude).
    declare local g to GM/(R^2).
    return -g.
}.

function suicide_burn_calculator {
    declare local parameter safety. //1 corresponds to no safety margin, 1.1 has a 10% safety margin
    
    declare local shipmass to ship:mass.
    declare local vd to ship:verticalspeed.
    declare local va to ((thrust/shipmass) + gravity_calculator()).
    declare local A to (vd^2)/(2*va).
    return safety * A. //adds the safety margin for error
}.

set thrust to ship:maxthrust.

DECLARE THR to 0.
LOCK THROTTLE TO THR.
SET PITCH_ANGLE TO 90 - vectorangle(UP:FOREVECTOR, FACING:FOREVECTOR).

DECLARE TARGET_LAT TO (80.0-15.1).

SET WARP TO 2.

PRINT "Waiting geopostition to descent".

UNTIL SHIP:LATITUDE > TARGET_LAT {
    IF SHIP:LATITUDE > 60 {
        SET WARP TO 0.
    }

    PRINT "Current latitude " + ROUND(SHIP:LATITUDE,2) AT (0,24).
}

PRINT "RCS on. SAS on. steering to retrograde".

RCS on.
SAS on.

WAIT 1.

//lock steering to retrograde.
SET sasmode TO "retrograde".

wait 60.

PRINT "Engine startup".

SET THR TO 1.0.

UNTIL SHIP:GROUNDSPEED < 1 {
    SET PITCH_ANGLE TO 90 - vectorangle(UP:FOREVECTOR, FACING:FOREVECTOR).
    PRINT "Vertical speed " + VERTICALSPEED AT (0,25).
    PRINT "Horizontal speed " + VELOCITY:ORBIT:MAG AT (0,26).
    PRINT "Surface Horizontal speed " + SHIP:GROUNDSPEED AT (0,27).
    PRINT "Pitch angle " + PITCH_ANGLE AT (0,28).
}.

SAS off.

SET MYSTEER TO HEADING(90,90).

LOCK STEERING TO MYSTEER.

SET RADARALT TO SHIP:ALTITUDE - SHIP:GEOPOSITION:TERRAINHEIGHT.

SET SUICIDE_ALT TO 10000.

UNTIL RADARALT < SUICIDE_ALT {
    SET PITCH_ANGLE TO 90 - vectorangle(UP:FOREVECTOR, FACING:FOREVECTOR).
    SET THR TO 0.
    SET RADARALT TO SHIP:ALTITUDE - SHIP:GEOPOSITION:TERRAINHEIGHT.
    SET SUICIDE_ALT TO suicide_burn_calculator(1.2).
    
    PRINT "Vertical speed " + VERTICALSPEED AT (0,25).
    PRINT "Horizontal speed " + VELOCITY:ORBIT:MAG AT (0,26).
    PRINT "Surface Horizontal speed " + SHIP:GROUNDSPEED AT (0,27).
    PRINT "Pitch angle " + PITCH_ANGLE AT (0,28).
    PRINT "Calculated suicide burn height " + SUICIDE_ALT AT (0,29).
}.

UNTIL VERTICALSPEED > -10 {
    SET PITCH_ANGLE TO 90 - vectorangle(UP:FOREVECTOR, FACING:FOREVECTOR).
    SET THR TO 1.
    PRINT "Vertical speed " + VERTICALSPEED AT (0,25).
    PRINT "Horizontal speed " + VELOCITY:ORBIT:MAG AT (0,26).
    PRINT "Surface Horizontal speed " + SHIP:GROUNDSPEED AT (0,27).
    PRINT "Pitch angle " + PITCH_ANGLE AT (0,28).
}.

PRINT "SAS on. Gear on. Transfer control to the pilot".

SAS on.

wait 1.

gear on.

set sasmode to "retrograde".

PRINT SHIP:GEOPOSITION.

SET V0 TO GetVoice(0).
V0:PLAY( NOTE( 440, 1) ).  // Play one note at 440 Hz for 1 second.

// Play a 'song' consisting of note, note, rest, sliding note, rest:
V0:PLAY(
    LIST(
        NOTE("A#4", 0.5,  0.25), // quarter note, of which the last 0.05s is 'release'.
        NOTE("F", 0.5,  0.25), // quarter note, of which the last 0.05s is 'release'.
        NOTE("A#4", 0.5,  0.25), // quarter note, of which the last 0.05s is 'release'.
        NOTE("F", 0.5,  0.25), // quarter note, of which the last 0.05s is 'release'.
        NOTE("A#4", 0.5,  0.25), // quarter note, of which the last 0.05s is 'release'.
        NOTE("F", 0.5,  0.25), // quarter note, of which the last 0.05s is 'release'.
        NOTE("A#4", 0.5,  0.25), // quarter note, of which the last 0.05s is 'release'.
        NOTE("F", 0.5,  0.25), // quarter note, of which the last 0.05s is 'release'.
        NOTE("A#4", 0.5,  0.25) // quarter note, of which the last 0.05s is 'release'.
    )
).

SET THR TO 0.1.

SET SHIP:CONTROL:PILOTMAINTHROTTLE TO 0.1.
